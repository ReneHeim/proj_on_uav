name: CI

on:
  # Run on every commit to any branch
  push:
  pull_request:
  schedule:
    # Run dependency updates weekly
    - cron: '0 2 * * 1'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13", "3.14", "3.15"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist
    
    - name: Install pre-commit hooks
      run: |
        pip install pre-commit
        pre-commit install
    
    - name: Run linting
      run: |
        pre-commit run --all-files || true
    
    - name: Run unit tests with coverage
      run: |
        python -m pytest tests/ -v --tb=short --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Run E2E tests
      run: |
        python -m pytest tests/e2e/ -v --tb=short
    
    - name: Test CLI scripts
      run: |
        python -m pytest tests/test_smoke.py -v
    
    - name: Test Makefile targets
      run: |
        make lint || true
        make format || true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.15"]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety
    
    - name: Run security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports-${{ matrix.python-version }}-${{ github.sha }}
        path: |
          bandit-report.json
          safety-report.json

  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        python-version: ["3.12", "3.15"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-${{ matrix.python-version }}-${{ github.sha }}
        path: dist/

  dependency-update:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    strategy:
      matrix:
        python-version: ["3.12", "3.15"]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install pip-tools
      run: |
        pip install pip-tools
    
    - name: Check for outdated dependencies
      run: |
        pip list --outdated --format=freeze > outdated.txt || true
        if [ -s outdated.txt ]; then
          echo "Outdated dependencies found:"
          cat outdated.txt
          exit 1
        fi
