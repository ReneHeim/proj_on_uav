name: Dependency Check

on:
  schedule:
    - cron: '0 2 * * 1'

env:
  PYTHON_VERSION: "3.12"

jobs:
  dependency-check:
    name: Check Dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install pip-tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools==7.5.0

      - name: Check for outdated dependencies
        id: check
        run: |
          echo "Checking for outdated dependencies..."
          pip install -r requirements.txt
          pip list --outdated --format=json > outdated.json
          
          python - <<'PY'
          import json, sys, pathlib
          data = json.loads(pathlib.Path('outdated.json').read_text())
          if data:
              print("⚠️ Outdated dependencies found:")
              for d in data:
                  latest = d.get("latest_version") or d.get("latest_release") or "unknown"
                  print(f"- {d['name']}: {d['version']} -> {latest}")
              sys.exit(1)
          else:
              print("✅ All dependencies are up to date!")
          PY

      - name: Create dependency update issue
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const items = JSON.parse(fs.readFileSync('outdated.json', 'utf8'));

            const list = items.map(d => `- ${d.name}: ${d.version} -> ${d.latest_version || 'unknown'}`).join('\n');

            const hasReqIn = fs.existsSync('requirements.in');
            let suggestions = '';
            if (hasReqIn) {
              const pkgs = items.map(d => `--upgrade-package ${d.name}`).join(' ');
              suggestions = [
                'If you use pip-tools:',
                '```bash',
                `pip-compile ${pkgs} -o requirements.txt requirements.in`,
                '```'
              ].join('\n');
            } else {
              const cmds = items.map(d => `pip install '${d.name}==${d.latest_version || 'X.Y.Z'}'`).join('\n');
              suggestions = [
                'If you only maintain `requirements.txt`:',
                '```bash',
                cmds || '# update packages manually',
                '```'
              ].join('\n');
            }

            const date = new Date().toISOString().split('T')[0];
            const body = [
              '## 📦 Outdated Dependencies Detected',
              '',
              '```',
              list || 'None',
              '```',
              '',
              '### Suggested Updates',
              suggestions,
              '',
              `**Scheduled check date:** ${date}`
            ].join('\n');

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔄 Weekly Dependency Update - ${new Date().toISOString().split('T')[0]}`,
              body,
              labels: ['dependencies', 'maintenance']
            });